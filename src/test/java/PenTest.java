import org.testng.annotations.Test;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

public class PenTest {

    @Test
    public void testIsWorkPositiveInk() {
        Pen pen = new Pen(2147483647);
        assertTrue(pen.isWork());
    }

    @Test
    public void testIsWorkZeroInk() {
        Pen pen = new Pen(0);
        assertTrue(!pen.isWork());
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testCreateNegativeInk() {
        new Pen(-2147483648);
    }

    @Test
    public void testGetColor() {
        Pen pen = new Pen(1, 1, "RED");
        assertEquals(pen.getColor(), "RED");
    }

    @Test
    public void testWriteBigLetter() {
        Pen pen = new Pen(1, 2);
        assertEquals(pen.write("A"), "");
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testCreateZeroSizeLetter() {
        new Pen(1, 0);
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testCreateNegativeSizeLetter() {
        new Pen(1, -2147483648);
    }

    @Test
    public void testWriteSpace() {
        Pen pen = new Pen(1);
        pen.write(" ");
        assertEquals(pen.write("A"), "A");
    }

    @Test
    public void testWritePartOfWord() {
        Pen pen = new Pen(10);
        pen.write("12345678");
        assertEquals(pen.write("910"), "91");
    }

    @Test
    public void testWriteZeroInk() {
        Pen pen = new Pen(0);
        assertEquals(pen.write("A"), "");
    }

    @Test
    public void testWritePartOfWordWithSizeLetterGreaterThanOne() {
        Pen pen = new Pen(9, 1.5);
        assertEquals(pen.write("1234567"), "123456");
    }

    @Test
    public void testWritePartOfWordWithSizeLetterLessThanOne() {
        Pen pen = new Pen(3, 0.5);
        assertEquals(pen.write("1234567"), "123456");
    }

    @Test
    public void testDoSomethingElse() {
        Pen pen = new Pen(1);
        pen.doSomethingElse();
        assertTrue(pen.isWork());
    }
}

